/***************************************************************************//**
 * 	@file			I2C_ll.h
 *  @brief			Файл подключается к проекту для работы с устройствами на I2C с помощью библиотеки LL.
 *	@author			Рафаэль Абельдинов
 *  @date 			18.12.2023
 ******************************************************************************/

/**
 * @defgroup I2C_group I2C LL
 * @brief  Модуль I2C для микроконтроллера F103. Подключается для работы модулей на библиотеке LL. 
 * @details Обеспечивает запись и чтение данных в регистр, передачу и чтение данных с шины I2C с проверкой на корректность выполненных операций. 
 * @{
 */
#ifndef I2C_H_
#define I2C_H_

#include "main.h"

/**
 * @name Макросы команд чтения и записи данных
 */
#define I2C_READ_SIGNAL 	0x01 			//!< Команда на чтение данных с устройства
#define I2C_WRITE_SIGNAL 	0x00			//!< Команда на запись данных на устройство 
/** @} */

/**
 * @brief Дополнительная внутрянняя функция для отлова ошибок в I2C
 * @param I2Cx I2C, для которого была вызвана функция для отправки или приема данных
 * @param бит регистра SR1, значение которого проверяется
 * @param timeout Время ожидания получения необходимого значения бита
 * @retval status Результат проверки бита I2C. Может быть
 * 					- **HAL_BUSY** - если по истечении времени шина осталась занятой
 * 					- **HAL_ERROR** - если по истечении времени флаг не изменился на указанный
 * 					-  **HAL_OK** - в остальных случаях  
 */
HAL_StatusTypeDef I2C__wait_flag(I2C_TypeDef *I2Cx, uint8_t bit, uint8_t timeout);

/**
 * @brief Чтение байтов с шины I2C от указанного устройства
 * @param I2Cx I2C, с которого принимаются данные
 * @param device_addres Адрес устройства, с которого отправлены данные
 * @param buffer Буфер, куда записываются считанные байты из сдвигого регистра
 * @oaram buffer_size Размер буфера в байтах 
 * @param timeout Время ожидания изменения флагов в регистре SR1
 * @retval status Результат приема данных. Может быть 
 * 					- **HAL_BUSY** - если по истечении времени шина осталась занятой 
 * 					- **HAL_ERROR** - если по истечении времени флаг не изменился на указанный
 *  					- **HAL_OK** - в остальных случаях
 */
HAL_StatusTypeDef LL_I2C_Master_Receive(I2C_TypeDef *I2Cx, uint8_t device_address, uint8_t *buffer, uint8_t buffer_size, uint8_t timeout);

/**
 * @brief Отправка байтов по шине I2C на указанное устройство
 * @param I2Cx I2C, через который отправляются байты
 * @param device_addres Адрес устройства, на которое отправляются данные
 * @param buffer Буфер отправляемых данных
 * @oaram buffer_size Размер буфера в байтах
 * @param timeout Время ожидания изменения флагов в регистре SR1
 * @retval status Результат отправки данных. Может быть 
 * 					- **HAL_BUSY** - если по истечении времени шина осталась занятой 
 * 					- **HAL_ERROR** - если по истечении времени флаг не изменился на указанный
 *  					- **HAL_OK** - в остальных случаях 
 */
HAL_StatusTypeDef LL_I2C_Master_Transmit(I2C_TypeDef *I2Cx, uint8_t device_address, uint8_t *buffer, uint8_t buffer_size, uint8_t timeout);

/**
 * @brief Запись байтов в указанный регистров устройства, подключенного к I2C
 * @param I2Cx I2C, к которому подключено устройство, с которого принимаются данные
 * @param device_addres Адрес устройства, с регистров которого читаются байты
 * @param register_address Адрес регистра, с котрого необходимо считать байты
 * @param buffer Буфер, куда записываются считанные байты из регистров устройства
 * @oaram buffer_size Размер буфера
 * @param timeout Время ожидания изменения флагов в регистре SR1
 * @retval status Результат чтения данных. Может быть 
 * 					- **HAL_BUSY** - если по истечении времени шина осталась занятой 
 * 					- **HAL_ERROR** - если по истечении времени флаг не изменился на указанный
 *  					- **HAL_OK** - в остальных случаях
 */
HAL_StatusTypeDef LL_I2C_Mem_Read(I2C_TypeDef *I2Cx, uint8_t device_address, uint16_t register_address, uint8_t *buffer, uint8_t buffer_size, uint8_t timeout);

/**
 * @brief Запись байтов в регистры устройства, подключенного к I2C
 * @param I2Cx I2C, к которому подключено устройство, в которое записываются данные 
 * @param device_addres Адрес устройства, в регистры которого записываются байты
 * @param register_address Адрес первого регистра, в который записываются данные 
 * @param buffer Буфер с данными, которые записываются в регистры устройства
 * @oaram buffer_size Размер буфера в байтах 
 * @param timeout Время ожидания изменения флагов в регистре SR1
 * @retval status Результат записи данных. Может быть 
 * 					- **HAL_BUSY** - если по истечении времени шина осталась занятой 
 * 					- **HAL_ERROR** - если по истечении времени флаг не изменился на указанный
 *  					- **HAL_OK** - в остальных случаях 
 */
HAL_StatusTypeDef LL_I2C_Mem_Write(I2C_TypeDef *I2Cx, uint8_t device_address, uint16_t register_address, uint8_t *buffer, uint8_t buffer_size, uint8_t timeout);

#endif /* I2C_H_ */

/** @} */